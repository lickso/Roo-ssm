<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd  
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx.xsd">  

    <!-- 自动扫描 将标注Spring注解的类自动转化Bean-->  
  	<context:component-scan base-package="com.roo.ssm" />

      
    <!-- 引入数据库配置信息  -->
    <context:property-placeholder location="classpath:config/db/db.properties" ignore-unresolvable="true"/>          
      
    <!--配置数据源:c3p0  com.mchange.v2.c3p0.ComboPooledDataSource-->  
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
        <property name="driverClass" value="${jdbc.driver}" />  
        <property name="jdbcUrl" value="${jdbc.url}" />  
        <property name="user" value="${jdbc.user}" />  
        <property name="password" value="${jdbc.passwd}" /> 
        
        <!-- 初始化连接大小 -->
        <!-- 连接池最大数量 -->
        <!-- 连接池最大空闲 -->
        <!-- 连接池最小空闲 -->
        <!-- 获取连接最大等待时间 -->
	    <!-- <property name="initialSize" value="${initialSize}"></property>  	      
	    <property name="maxActive" value="${maxActive}"></property>  	      
	    <property name="maxIdle" value="${maxIdle}"></property>  	      
	    <property name="minIdle" value="${minIdle}"></property>  	      
	    <property name="maxWait" value="${maxWait}"></property> -->   
    </bean>  
      
   <!--  自动扫描mapping.xml  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"/>  
        <property name="mapperLocations" value="classpath:com/roo/ssm/mapper/*.xml"/>  
        <property name="typeAliasesPackage" value="com.roo.ssm.bean"/>  
    </bean>  
      
    <!-- 装配dao接口 -->   
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.roo.ssm.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean>  
      
    <!-- 配置事务管理器  -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"></property>
    </bean>  
      
    <!--5.开启注解进行事务管理   transaction-manager：引用上面定义的事务管理器-->  
    <tx:annotation-driven transaction-manager="transactionManager"/> 
    
    <!-- <typeAlias type="com.roo.ssm.bean.User" alias="User"/> -->
    
    <!-- <import resource="beans-context.xml"/> -->
    
    <!-- 引入redis配置信息 -->
<!--     <context:property-placeholder location="classpath:config/redis/redis.properties" ignore-unresolvable="true"/>
 -->    	
    <!-- 1.对redis进行解析与配置 -->
   <!--  <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
	    <property name="maxIdle" value="${redis.maxIdle}" />  
	    <property name="maxTotal" value="${redis.maxActive}" />  
	    <property name="maxWaitMillis" value="${redis.maxWait}" />  
	    <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
	</bean> -->
    
    <!-- 2.Spring-redis连接池管理工厂 -->
	<!-- <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
    	p:host-name="${redis.host}" 
    	p:port="${redis.port}" 
    	p:password="${redis.pass}"  
    	p:pool-config-ref="poolConfig"/> -->
    
    <!-- 3.使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
	<!-- <bean id="redisCacheTransfer" class="com.strive.cms.cache.RedisCacheTransfer">
	    <property name="jedisConnectionFactory" ref="jedisConnectionFactory"/>
	</bean>	 -->
    <!-- 对bean进行配置 -->
    <!-- <bean id="userx" class="com.coo.fee.ssm.bean.User">     
        <property name="name" value="name"/>     
        <property name="password" value="password"/>     
    </bean> -->
</beans>  